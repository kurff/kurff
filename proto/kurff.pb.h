// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kurff.proto

#ifndef PROTOBUF_kurff_2eproto__INCLUDED
#define PROTOBUF_kurff_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_kurff_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsbounderImpl();
void InitDefaultsbounder();
void InitDefaultsParametersImpl();
void InitDefaultsParameters();
inline void InitDefaults() {
  InitDefaultsbounder();
  InitDefaultsParameters();
}
}  // namespace protobuf_kurff_2eproto
namespace kurff {
class Parameters;
class ParametersDefaultTypeInternal;
extern ParametersDefaultTypeInternal _Parameters_default_instance_;
class bounder;
class bounderDefaultTypeInternal;
extern bounderDefaultTypeInternal _bounder_default_instance_;
}  // namespace kurff
namespace kurff {

// ===================================================================

class bounder : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kurff.bounder) */ {
 public:
  bounder();
  virtual ~bounder();

  bounder(const bounder& from);

  inline bounder& operator=(const bounder& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  bounder(bounder&& from) noexcept
    : bounder() {
    *this = ::std::move(from);
  }

  inline bounder& operator=(bounder&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const bounder& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const bounder* internal_default_instance() {
    return reinterpret_cast<const bounder*>(
               &_bounder_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(bounder* other);
  friend void swap(bounder& a, bounder& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline bounder* New() const PROTOBUF_FINAL { return New(NULL); }

  bounder* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const bounder& from);
  void MergeFrom(const bounder& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(bounder* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float upper = 1 [default = 0];
  bool has_upper() const;
  void clear_upper();
  static const int kUpperFieldNumber = 1;
  float upper() const;
  void set_upper(float value);

  // required float lower = 2 [default = 0];
  bool has_lower() const;
  void clear_lower();
  static const int kLowerFieldNumber = 2;
  float lower() const;
  void set_lower(float value);

  // @@protoc_insertion_point(class_scope:kurff.bounder)
 private:
  void set_has_upper();
  void clear_has_upper();
  void set_has_lower();
  void clear_has_lower();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float upper_;
  float lower_;
  friend struct ::protobuf_kurff_2eproto::TableStruct;
  friend void ::protobuf_kurff_2eproto::InitDefaultsbounderImpl();
};
// -------------------------------------------------------------------

class Parameters : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kurff.Parameters) */ {
 public:
  Parameters();
  virtual ~Parameters();

  Parameters(const Parameters& from);

  inline Parameters& operator=(const Parameters& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Parameters(Parameters&& from) noexcept
    : Parameters() {
    *this = ::std::move(from);
  }

  inline Parameters& operator=(Parameters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Parameters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Parameters* internal_default_instance() {
    return reinterpret_cast<const Parameters*>(
               &_Parameters_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Parameters* other);
  friend void swap(Parameters& a, Parameters& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Parameters* New() const PROTOBUF_FINAL { return New(NULL); }

  Parameters* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Parameters& from);
  void MergeFrom(const Parameters& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Parameters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string transform = 6;
  int transform_size() const;
  void clear_transform();
  static const int kTransformFieldNumber = 6;
  const ::std::string& transform(int index) const;
  ::std::string* mutable_transform(int index);
  void set_transform(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_transform(int index, ::std::string&& value);
  #endif
  void set_transform(int index, const char* value);
  void set_transform(int index, const char* value, size_t size);
  ::std::string* add_transform();
  void add_transform(const ::std::string& value);
  #if LANG_CXX11
  void add_transform(::std::string&& value);
  #endif
  void add_transform(const char* value);
  void add_transform(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& transform() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_transform();

  // required .kurff.bounder mean = 1;
  bool has_mean() const;
  void clear_mean();
  static const int kMeanFieldNumber = 1;
  const ::kurff::bounder& mean() const;
  ::kurff::bounder* release_mean();
  ::kurff::bounder* mutable_mean();
  void set_allocated_mean(::kurff::bounder* mean);

  // required .kurff.bounder std = 2;
  bool has_std() const;
  void clear_std();
  static const int kStdFieldNumber = 2;
  const ::kurff::bounder& std() const;
  ::kurff::bounder* release_std();
  ::kurff::bounder* mutable_std();
  void set_allocated_std(::kurff::bounder* std);

  // required .kurff.bounder angle = 3;
  bool has_angle() const;
  void clear_angle();
  static const int kAngleFieldNumber = 3;
  const ::kurff::bounder& angle() const;
  ::kurff::bounder* release_angle();
  ::kurff::bounder* mutable_angle();
  void set_allocated_angle(::kurff::bounder* angle);

  // required .kurff.bounder scale = 4;
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 4;
  const ::kurff::bounder& scale() const;
  ::kurff::bounder* release_scale();
  ::kurff::bounder* mutable_scale();
  void set_allocated_scale(::kurff::bounder* scale);

  // required .kurff.bounder gamma = 5;
  bool has_gamma() const;
  void clear_gamma();
  static const int kGammaFieldNumber = 5;
  const ::kurff::bounder& gamma() const;
  ::kurff::bounder* release_gamma();
  ::kurff::bounder* mutable_gamma();
  void set_allocated_gamma(::kurff::bounder* gamma);

  // @@protoc_insertion_point(class_scope:kurff.Parameters)
 private:
  void set_has_mean();
  void clear_has_mean();
  void set_has_std();
  void clear_has_std();
  void set_has_angle();
  void clear_has_angle();
  void set_has_scale();
  void clear_has_scale();
  void set_has_gamma();
  void clear_has_gamma();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> transform_;
  ::kurff::bounder* mean_;
  ::kurff::bounder* std_;
  ::kurff::bounder* angle_;
  ::kurff::bounder* scale_;
  ::kurff::bounder* gamma_;
  friend struct ::protobuf_kurff_2eproto::TableStruct;
  friend void ::protobuf_kurff_2eproto::InitDefaultsParametersImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// bounder

// required float upper = 1 [default = 0];
inline bool bounder::has_upper() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void bounder::set_has_upper() {
  _has_bits_[0] |= 0x00000001u;
}
inline void bounder::clear_has_upper() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void bounder::clear_upper() {
  upper_ = 0;
  clear_has_upper();
}
inline float bounder::upper() const {
  // @@protoc_insertion_point(field_get:kurff.bounder.upper)
  return upper_;
}
inline void bounder::set_upper(float value) {
  set_has_upper();
  upper_ = value;
  // @@protoc_insertion_point(field_set:kurff.bounder.upper)
}

// required float lower = 2 [default = 0];
inline bool bounder::has_lower() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void bounder::set_has_lower() {
  _has_bits_[0] |= 0x00000002u;
}
inline void bounder::clear_has_lower() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void bounder::clear_lower() {
  lower_ = 0;
  clear_has_lower();
}
inline float bounder::lower() const {
  // @@protoc_insertion_point(field_get:kurff.bounder.lower)
  return lower_;
}
inline void bounder::set_lower(float value) {
  set_has_lower();
  lower_ = value;
  // @@protoc_insertion_point(field_set:kurff.bounder.lower)
}

// -------------------------------------------------------------------

// Parameters

// required .kurff.bounder mean = 1;
inline bool Parameters::has_mean() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Parameters::set_has_mean() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Parameters::clear_has_mean() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Parameters::clear_mean() {
  if (mean_ != NULL) mean_->Clear();
  clear_has_mean();
}
inline const ::kurff::bounder& Parameters::mean() const {
  const ::kurff::bounder* p = mean_;
  // @@protoc_insertion_point(field_get:kurff.Parameters.mean)
  return p != NULL ? *p : *reinterpret_cast<const ::kurff::bounder*>(
      &::kurff::_bounder_default_instance_);
}
inline ::kurff::bounder* Parameters::release_mean() {
  // @@protoc_insertion_point(field_release:kurff.Parameters.mean)
  clear_has_mean();
  ::kurff::bounder* temp = mean_;
  mean_ = NULL;
  return temp;
}
inline ::kurff::bounder* Parameters::mutable_mean() {
  set_has_mean();
  if (mean_ == NULL) {
    mean_ = new ::kurff::bounder;
  }
  // @@protoc_insertion_point(field_mutable:kurff.Parameters.mean)
  return mean_;
}
inline void Parameters::set_allocated_mean(::kurff::bounder* mean) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete mean_;
  }
  if (mean) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mean = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mean, submessage_arena);
    }
    set_has_mean();
  } else {
    clear_has_mean();
  }
  mean_ = mean;
  // @@protoc_insertion_point(field_set_allocated:kurff.Parameters.mean)
}

// required .kurff.bounder std = 2;
inline bool Parameters::has_std() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Parameters::set_has_std() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Parameters::clear_has_std() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Parameters::clear_std() {
  if (std_ != NULL) std_->Clear();
  clear_has_std();
}
inline const ::kurff::bounder& Parameters::std() const {
  const ::kurff::bounder* p = std_;
  // @@protoc_insertion_point(field_get:kurff.Parameters.std)
  return p != NULL ? *p : *reinterpret_cast<const ::kurff::bounder*>(
      &::kurff::_bounder_default_instance_);
}
inline ::kurff::bounder* Parameters::release_std() {
  // @@protoc_insertion_point(field_release:kurff.Parameters.std)
  clear_has_std();
  ::kurff::bounder* temp = std_;
  std_ = NULL;
  return temp;
}
inline ::kurff::bounder* Parameters::mutable_std() {
  set_has_std();
  if (std_ == NULL) {
    std_ = new ::kurff::bounder;
  }
  // @@protoc_insertion_point(field_mutable:kurff.Parameters.std)
  return std_;
}
inline void Parameters::set_allocated_std(::kurff::bounder* std) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete std_;
  }
  if (std) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      std = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, std, submessage_arena);
    }
    set_has_std();
  } else {
    clear_has_std();
  }
  std_ = std;
  // @@protoc_insertion_point(field_set_allocated:kurff.Parameters.std)
}

// required .kurff.bounder angle = 3;
inline bool Parameters::has_angle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Parameters::set_has_angle() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Parameters::clear_has_angle() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Parameters::clear_angle() {
  if (angle_ != NULL) angle_->Clear();
  clear_has_angle();
}
inline const ::kurff::bounder& Parameters::angle() const {
  const ::kurff::bounder* p = angle_;
  // @@protoc_insertion_point(field_get:kurff.Parameters.angle)
  return p != NULL ? *p : *reinterpret_cast<const ::kurff::bounder*>(
      &::kurff::_bounder_default_instance_);
}
inline ::kurff::bounder* Parameters::release_angle() {
  // @@protoc_insertion_point(field_release:kurff.Parameters.angle)
  clear_has_angle();
  ::kurff::bounder* temp = angle_;
  angle_ = NULL;
  return temp;
}
inline ::kurff::bounder* Parameters::mutable_angle() {
  set_has_angle();
  if (angle_ == NULL) {
    angle_ = new ::kurff::bounder;
  }
  // @@protoc_insertion_point(field_mutable:kurff.Parameters.angle)
  return angle_;
}
inline void Parameters::set_allocated_angle(::kurff::bounder* angle) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete angle_;
  }
  if (angle) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      angle = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, angle, submessage_arena);
    }
    set_has_angle();
  } else {
    clear_has_angle();
  }
  angle_ = angle;
  // @@protoc_insertion_point(field_set_allocated:kurff.Parameters.angle)
}

// required .kurff.bounder scale = 4;
inline bool Parameters::has_scale() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Parameters::set_has_scale() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Parameters::clear_has_scale() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Parameters::clear_scale() {
  if (scale_ != NULL) scale_->Clear();
  clear_has_scale();
}
inline const ::kurff::bounder& Parameters::scale() const {
  const ::kurff::bounder* p = scale_;
  // @@protoc_insertion_point(field_get:kurff.Parameters.scale)
  return p != NULL ? *p : *reinterpret_cast<const ::kurff::bounder*>(
      &::kurff::_bounder_default_instance_);
}
inline ::kurff::bounder* Parameters::release_scale() {
  // @@protoc_insertion_point(field_release:kurff.Parameters.scale)
  clear_has_scale();
  ::kurff::bounder* temp = scale_;
  scale_ = NULL;
  return temp;
}
inline ::kurff::bounder* Parameters::mutable_scale() {
  set_has_scale();
  if (scale_ == NULL) {
    scale_ = new ::kurff::bounder;
  }
  // @@protoc_insertion_point(field_mutable:kurff.Parameters.scale)
  return scale_;
}
inline void Parameters::set_allocated_scale(::kurff::bounder* scale) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete scale_;
  }
  if (scale) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scale = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scale, submessage_arena);
    }
    set_has_scale();
  } else {
    clear_has_scale();
  }
  scale_ = scale;
  // @@protoc_insertion_point(field_set_allocated:kurff.Parameters.scale)
}

// required .kurff.bounder gamma = 5;
inline bool Parameters::has_gamma() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Parameters::set_has_gamma() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Parameters::clear_has_gamma() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Parameters::clear_gamma() {
  if (gamma_ != NULL) gamma_->Clear();
  clear_has_gamma();
}
inline const ::kurff::bounder& Parameters::gamma() const {
  const ::kurff::bounder* p = gamma_;
  // @@protoc_insertion_point(field_get:kurff.Parameters.gamma)
  return p != NULL ? *p : *reinterpret_cast<const ::kurff::bounder*>(
      &::kurff::_bounder_default_instance_);
}
inline ::kurff::bounder* Parameters::release_gamma() {
  // @@protoc_insertion_point(field_release:kurff.Parameters.gamma)
  clear_has_gamma();
  ::kurff::bounder* temp = gamma_;
  gamma_ = NULL;
  return temp;
}
inline ::kurff::bounder* Parameters::mutable_gamma() {
  set_has_gamma();
  if (gamma_ == NULL) {
    gamma_ = new ::kurff::bounder;
  }
  // @@protoc_insertion_point(field_mutable:kurff.Parameters.gamma)
  return gamma_;
}
inline void Parameters::set_allocated_gamma(::kurff::bounder* gamma) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete gamma_;
  }
  if (gamma) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      gamma = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, gamma, submessage_arena);
    }
    set_has_gamma();
  } else {
    clear_has_gamma();
  }
  gamma_ = gamma;
  // @@protoc_insertion_point(field_set_allocated:kurff.Parameters.gamma)
}

// repeated string transform = 6;
inline int Parameters::transform_size() const {
  return transform_.size();
}
inline void Parameters::clear_transform() {
  transform_.Clear();
}
inline const ::std::string& Parameters::transform(int index) const {
  // @@protoc_insertion_point(field_get:kurff.Parameters.transform)
  return transform_.Get(index);
}
inline ::std::string* Parameters::mutable_transform(int index) {
  // @@protoc_insertion_point(field_mutable:kurff.Parameters.transform)
  return transform_.Mutable(index);
}
inline void Parameters::set_transform(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:kurff.Parameters.transform)
  transform_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Parameters::set_transform(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:kurff.Parameters.transform)
  transform_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Parameters::set_transform(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  transform_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kurff.Parameters.transform)
}
inline void Parameters::set_transform(int index, const char* value, size_t size) {
  transform_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kurff.Parameters.transform)
}
inline ::std::string* Parameters::add_transform() {
  // @@protoc_insertion_point(field_add_mutable:kurff.Parameters.transform)
  return transform_.Add();
}
inline void Parameters::add_transform(const ::std::string& value) {
  transform_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kurff.Parameters.transform)
}
#if LANG_CXX11
inline void Parameters::add_transform(::std::string&& value) {
  transform_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kurff.Parameters.transform)
}
#endif
inline void Parameters::add_transform(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  transform_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kurff.Parameters.transform)
}
inline void Parameters::add_transform(const char* value, size_t size) {
  transform_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kurff.Parameters.transform)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Parameters::transform() const {
  // @@protoc_insertion_point(field_list:kurff.Parameters.transform)
  return transform_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Parameters::mutable_transform() {
  // @@protoc_insertion_point(field_mutable_list:kurff.Parameters.transform)
  return &transform_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace kurff

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_kurff_2eproto__INCLUDED

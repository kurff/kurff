// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kurff.proto

#include "kurff.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace kurff {
class bounderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<bounder>
      _instance;
} _bounder_default_instance_;
class ParametersDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Parameters>
      _instance;
} _Parameters_default_instance_;
}  // namespace kurff
namespace protobuf_kurff_2eproto {
void InitDefaultsbounderImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::kurff::_bounder_default_instance_;
    new (ptr) ::kurff::bounder();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kurff::bounder::InitAsDefaultInstance();
}

void InitDefaultsbounder() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsbounderImpl);
}

void InitDefaultsParametersImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_kurff_2eproto::InitDefaultsbounder();
  {
    void* ptr = &::kurff::_Parameters_default_instance_;
    new (ptr) ::kurff::Parameters();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kurff::Parameters::InitAsDefaultInstance();
}

void InitDefaultsParameters() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsParametersImpl);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kurff::bounder, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kurff::bounder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kurff::bounder, upper_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kurff::bounder, lower_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kurff::Parameters, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kurff::Parameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kurff::Parameters, mean_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kurff::Parameters, std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kurff::Parameters, angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kurff::Parameters, scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kurff::Parameters, gamma_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kurff::Parameters, transform_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kurff::Parameters, background_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kurff::Parameters, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kurff::Parameters, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kurff::Parameters, rgb2gray_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::kurff::Parameters, center_),
  1,
  2,
  3,
  4,
  5,
  ~0u,
  0,
  7,
  8,
  9,
  6,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::kurff::bounder)},
  { 9, 25, sizeof(::kurff::Parameters)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::kurff::_bounder_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::kurff::_Parameters_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "kurff.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\013kurff.proto\022\005kurff\"-\n\007bounder\022\020\n\005upper"
      "\030\001 \002(\002:\0010\022\020\n\005lower\030\002 \002(\002:\0010\"\242\002\n\nParamete"
      "rs\022\034\n\004mean\030\001 \002(\0132\016.kurff.bounder\022\033\n\003std\030"
      "\002 \002(\0132\016.kurff.bounder\022\035\n\005angle\030\003 \002(\0132\016.k"
      "urff.bounder\022\035\n\005scale\030\004 \002(\0132\016.kurff.boun"
      "der\022\035\n\005gamma\030\005 \002(\0132\016.kurff.bounder\022\021\n\ttr"
      "ansform\030\006 \003(\t\022\022\n\nbackground\030\007 \002(\t\022\016\n\006hei"
      "ght\030\010 \002(\005\022\r\n\005width\030\t \002(\005\022\026\n\010rgb2gray\030\n \002"
      "(\010:\004true\022\036\n\006center\030\013 \002(\0132\016.kurff.bounder"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 360);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "kurff.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_kurff_2eproto
namespace kurff {

// ===================================================================

void bounder::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int bounder::kUpperFieldNumber;
const int bounder::kLowerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

bounder::bounder()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_kurff_2eproto::InitDefaultsbounder();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kurff.bounder)
}
bounder::bounder(const bounder& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&upper_, &from.upper_,
    static_cast<size_t>(reinterpret_cast<char*>(&lower_) -
    reinterpret_cast<char*>(&upper_)) + sizeof(lower_));
  // @@protoc_insertion_point(copy_constructor:kurff.bounder)
}

void bounder::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&upper_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lower_) -
      reinterpret_cast<char*>(&upper_)) + sizeof(lower_));
}

bounder::~bounder() {
  // @@protoc_insertion_point(destructor:kurff.bounder)
  SharedDtor();
}

void bounder::SharedDtor() {
}

void bounder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* bounder::descriptor() {
  ::protobuf_kurff_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_kurff_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const bounder& bounder::default_instance() {
  ::protobuf_kurff_2eproto::InitDefaultsbounder();
  return *internal_default_instance();
}

bounder* bounder::New(::google::protobuf::Arena* arena) const {
  bounder* n = new bounder;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void bounder::Clear() {
// @@protoc_insertion_point(message_clear_start:kurff.bounder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&upper_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lower_) -
        reinterpret_cast<char*>(&upper_)) + sizeof(lower_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool bounder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kurff.bounder)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float upper = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_upper();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &upper_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float lower = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_lower();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lower_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kurff.bounder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kurff.bounder)
  return false;
#undef DO_
}

void bounder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kurff.bounder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float upper = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->upper(), output);
  }

  // required float lower = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->lower(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kurff.bounder)
}

::google::protobuf::uint8* bounder::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kurff.bounder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float upper = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->upper(), target);
  }

  // required float lower = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->lower(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kurff.bounder)
  return target;
}

size_t bounder::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:kurff.bounder)
  size_t total_size = 0;

  if (has_upper()) {
    // required float upper = 1 [default = 0];
    total_size += 1 + 4;
  }

  if (has_lower()) {
    // required float lower = 2 [default = 0];
    total_size += 1 + 4;
  }

  return total_size;
}
size_t bounder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kurff.bounder)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float upper = 1 [default = 0];
    total_size += 1 + 4;

    // required float lower = 2 [default = 0];
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void bounder::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kurff.bounder)
  GOOGLE_DCHECK_NE(&from, this);
  const bounder* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const bounder>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kurff.bounder)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kurff.bounder)
    MergeFrom(*source);
  }
}

void bounder::MergeFrom(const bounder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kurff.bounder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      upper_ = from.upper_;
    }
    if (cached_has_bits & 0x00000002u) {
      lower_ = from.lower_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void bounder::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kurff.bounder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bounder::CopyFrom(const bounder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kurff.bounder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bounder::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void bounder::Swap(bounder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void bounder::InternalSwap(bounder* other) {
  using std::swap;
  swap(upper_, other->upper_);
  swap(lower_, other->lower_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata bounder::GetMetadata() const {
  protobuf_kurff_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_kurff_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Parameters::InitAsDefaultInstance() {
  ::kurff::_Parameters_default_instance_._instance.get_mutable()->mean_ = const_cast< ::kurff::bounder*>(
      ::kurff::bounder::internal_default_instance());
  ::kurff::_Parameters_default_instance_._instance.get_mutable()->std_ = const_cast< ::kurff::bounder*>(
      ::kurff::bounder::internal_default_instance());
  ::kurff::_Parameters_default_instance_._instance.get_mutable()->angle_ = const_cast< ::kurff::bounder*>(
      ::kurff::bounder::internal_default_instance());
  ::kurff::_Parameters_default_instance_._instance.get_mutable()->scale_ = const_cast< ::kurff::bounder*>(
      ::kurff::bounder::internal_default_instance());
  ::kurff::_Parameters_default_instance_._instance.get_mutable()->gamma_ = const_cast< ::kurff::bounder*>(
      ::kurff::bounder::internal_default_instance());
  ::kurff::_Parameters_default_instance_._instance.get_mutable()->center_ = const_cast< ::kurff::bounder*>(
      ::kurff::bounder::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Parameters::kMeanFieldNumber;
const int Parameters::kStdFieldNumber;
const int Parameters::kAngleFieldNumber;
const int Parameters::kScaleFieldNumber;
const int Parameters::kGammaFieldNumber;
const int Parameters::kTransformFieldNumber;
const int Parameters::kBackgroundFieldNumber;
const int Parameters::kHeightFieldNumber;
const int Parameters::kWidthFieldNumber;
const int Parameters::kRgb2GrayFieldNumber;
const int Parameters::kCenterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Parameters::Parameters()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_kurff_2eproto::InitDefaultsParameters();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:kurff.Parameters)
}
Parameters::Parameters(const Parameters& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      transform_(from.transform_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  background_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_background()) {
    background_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.background_);
  }
  if (from.has_mean()) {
    mean_ = new ::kurff::bounder(*from.mean_);
  } else {
    mean_ = NULL;
  }
  if (from.has_std()) {
    std_ = new ::kurff::bounder(*from.std_);
  } else {
    std_ = NULL;
  }
  if (from.has_angle()) {
    angle_ = new ::kurff::bounder(*from.angle_);
  } else {
    angle_ = NULL;
  }
  if (from.has_scale()) {
    scale_ = new ::kurff::bounder(*from.scale_);
  } else {
    scale_ = NULL;
  }
  if (from.has_gamma()) {
    gamma_ = new ::kurff::bounder(*from.gamma_);
  } else {
    gamma_ = NULL;
  }
  if (from.has_center()) {
    center_ = new ::kurff::bounder(*from.center_);
  } else {
    center_ = NULL;
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&rgb2gray_) -
    reinterpret_cast<char*>(&height_)) + sizeof(rgb2gray_));
  // @@protoc_insertion_point(copy_constructor:kurff.Parameters)
}

void Parameters::SharedCtor() {
  _cached_size_ = 0;
  background_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&mean_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&width_) -
      reinterpret_cast<char*>(&mean_)) + sizeof(width_));
  rgb2gray_ = true;
}

Parameters::~Parameters() {
  // @@protoc_insertion_point(destructor:kurff.Parameters)
  SharedDtor();
}

void Parameters::SharedDtor() {
  background_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete mean_;
  if (this != internal_default_instance()) delete std_;
  if (this != internal_default_instance()) delete angle_;
  if (this != internal_default_instance()) delete scale_;
  if (this != internal_default_instance()) delete gamma_;
  if (this != internal_default_instance()) delete center_;
}

void Parameters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Parameters::descriptor() {
  ::protobuf_kurff_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_kurff_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Parameters& Parameters::default_instance() {
  ::protobuf_kurff_2eproto::InitDefaultsParameters();
  return *internal_default_instance();
}

Parameters* Parameters::New(::google::protobuf::Arena* arena) const {
  Parameters* n = new Parameters;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Parameters::Clear() {
// @@protoc_insertion_point(message_clear_start:kurff.Parameters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transform_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!background_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*background_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(mean_ != NULL);
      mean_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(std_ != NULL);
      std_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(angle_ != NULL);
      angle_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(scale_ != NULL);
      scale_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(gamma_ != NULL);
      gamma_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(center_ != NULL);
      center_->Clear();
    }
  }
  height_ = 0;
  if (cached_has_bits & 768u) {
    width_ = 0;
    rgb2gray_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Parameters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kurff.Parameters)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .kurff.bounder mean = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mean()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .kurff.bounder std = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_std()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .kurff.bounder angle = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_angle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .kurff.bounder scale = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_scale()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .kurff.bounder gamma = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gamma()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string transform = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_transform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->transform(this->transform_size() - 1).data(),
            static_cast<int>(this->transform(this->transform_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kurff.Parameters.transform");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string background = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_background()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->background().data(), static_cast<int>(this->background().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kurff.Parameters.background");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 height = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 width = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool rgb2gray = 10 [default = true];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_rgb2gray();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rgb2gray_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .kurff.bounder center = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_center()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kurff.Parameters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kurff.Parameters)
  return false;
#undef DO_
}

void Parameters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kurff.Parameters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .kurff.bounder mean = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->mean_, output);
  }

  // required .kurff.bounder std = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->std_, output);
  }

  // required .kurff.bounder angle = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->angle_, output);
  }

  // required .kurff.bounder scale = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->scale_, output);
  }

  // required .kurff.bounder gamma = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->gamma_, output);
  }

  // repeated string transform = 6;
  for (int i = 0, n = this->transform_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->transform(i).data(), static_cast<int>(this->transform(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kurff.Parameters.transform");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->transform(i), output);
  }

  // required string background = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->background().data(), static_cast<int>(this->background().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kurff.Parameters.background");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->background(), output);
  }

  // required int32 height = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->height(), output);
  }

  // required int32 width = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->width(), output);
  }

  // required bool rgb2gray = 10 [default = true];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->rgb2gray(), output);
  }

  // required .kurff.bounder center = 11;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->center_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kurff.Parameters)
}

::google::protobuf::uint8* Parameters::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kurff.Parameters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .kurff.bounder mean = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->mean_, deterministic, target);
  }

  // required .kurff.bounder std = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->std_, deterministic, target);
  }

  // required .kurff.bounder angle = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->angle_, deterministic, target);
  }

  // required .kurff.bounder scale = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->scale_, deterministic, target);
  }

  // required .kurff.bounder gamma = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->gamma_, deterministic, target);
  }

  // repeated string transform = 6;
  for (int i = 0, n = this->transform_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->transform(i).data(), static_cast<int>(this->transform(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kurff.Parameters.transform");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->transform(i), target);
  }

  // required string background = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->background().data(), static_cast<int>(this->background().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kurff.Parameters.background");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->background(), target);
  }

  // required int32 height = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->height(), target);
  }

  // required int32 width = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->width(), target);
  }

  // required bool rgb2gray = 10 [default = true];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->rgb2gray(), target);
  }

  // required .kurff.bounder center = 11;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, *this->center_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kurff.Parameters)
  return target;
}

size_t Parameters::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:kurff.Parameters)
  size_t total_size = 0;

  if (has_background()) {
    // required string background = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->background());
  }

  if (has_mean()) {
    // required .kurff.bounder mean = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->mean_);
  }

  if (has_std()) {
    // required .kurff.bounder std = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->std_);
  }

  if (has_angle()) {
    // required .kurff.bounder angle = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->angle_);
  }

  if (has_scale()) {
    // required .kurff.bounder scale = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->scale_);
  }

  if (has_gamma()) {
    // required .kurff.bounder gamma = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->gamma_);
  }

  if (has_center()) {
    // required .kurff.bounder center = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->center_);
  }

  if (has_height()) {
    // required int32 height = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  if (has_width()) {
    // required int32 width = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  if (has_rgb2gray()) {
    // required bool rgb2gray = 10 [default = true];
    total_size += 1 + 1;
  }

  return total_size;
}
size_t Parameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kurff.Parameters)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000003ff) ^ 0x000003ff) == 0) {  // All required fields are present.
    // required string background = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->background());

    // required .kurff.bounder mean = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->mean_);

    // required .kurff.bounder std = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->std_);

    // required .kurff.bounder angle = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->angle_);

    // required .kurff.bounder scale = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->scale_);

    // required .kurff.bounder gamma = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->gamma_);

    // required .kurff.bounder center = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->center_);

    // required int32 height = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());

    // required int32 width = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());

    // required bool rgb2gray = 10 [default = true];
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string transform = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->transform_size());
  for (int i = 0, n = this->transform_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->transform(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Parameters::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kurff.Parameters)
  GOOGLE_DCHECK_NE(&from, this);
  const Parameters* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Parameters>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kurff.Parameters)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kurff.Parameters)
    MergeFrom(*source);
  }
}

void Parameters::MergeFrom(const Parameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kurff.Parameters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transform_.MergeFrom(from.transform_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_background();
      background_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.background_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_mean()->::kurff::bounder::MergeFrom(from.mean());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_std()->::kurff::bounder::MergeFrom(from.std());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_angle()->::kurff::bounder::MergeFrom(from.angle());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_scale()->::kurff::bounder::MergeFrom(from.scale());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_gamma()->::kurff::bounder::MergeFrom(from.gamma());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_center()->::kurff::bounder::MergeFrom(from.center());
    }
    if (cached_has_bits & 0x00000080u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000200u) {
      rgb2gray_ = from.rgb2gray_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Parameters::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kurff.Parameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Parameters::CopyFrom(const Parameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kurff.Parameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parameters::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;
  if (has_mean()) {
    if (!this->mean_->IsInitialized()) return false;
  }
  if (has_std()) {
    if (!this->std_->IsInitialized()) return false;
  }
  if (has_angle()) {
    if (!this->angle_->IsInitialized()) return false;
  }
  if (has_scale()) {
    if (!this->scale_->IsInitialized()) return false;
  }
  if (has_gamma()) {
    if (!this->gamma_->IsInitialized()) return false;
  }
  if (has_center()) {
    if (!this->center_->IsInitialized()) return false;
  }
  return true;
}

void Parameters::Swap(Parameters* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Parameters::InternalSwap(Parameters* other) {
  using std::swap;
  transform_.InternalSwap(&other->transform_);
  background_.Swap(&other->background_);
  swap(mean_, other->mean_);
  swap(std_, other->std_);
  swap(angle_, other->angle_);
  swap(scale_, other->scale_);
  swap(gamma_, other->gamma_);
  swap(center_, other->center_);
  swap(height_, other->height_);
  swap(width_, other->width_);
  swap(rgb2gray_, other->rgb2gray_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Parameters::GetMetadata() const {
  protobuf_kurff_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_kurff_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace kurff

// @@protoc_insertion_point(global_scope)
